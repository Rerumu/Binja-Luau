use num_enum::TryFromPrimitive;

#[repr(u8)]
#[derive(TryFromPrimitive, Clone, Copy)]
pub enum BuiltIn {
	Assert = 1,

	Abs,
	Acos,
	Asin,
	Atan2,
	Atan,
	Ceil,
	Cosh,
	Cos,
	Deg,
	Exp,
	Floor,
	Fmod,
	Frexp,
	Ldexp,
	Log10,
	Log,
	Max,
	Min,
	Modf,
	Pow,
	Rad,
	Sinh,
	Sin,
	Sqrt,
	Tanh,
	Tan,

	Arshift,
	Band,
	Bnot,
	Bor,
	Bxor,
	Btest,
	Extract,
	Lrotate,
	Lshift,
	Replace,
	Rrotate,
	Rshift,

	Type,

	Byte,
	Char,
	Len,

	Typeof,

	Sub,

	Clamp,
	Sign,
	Round,

	Rawset,
	Rawget,
	Rawequal,

	Tinsert,
	Tunpack,

	Vector,

	Countlz,
	Countrz,

	Select,

	Rawlen,

	ExtractK,

	GetMetatable,
	SetMetatable,
}

impl BuiltIn {
	pub fn name(self) -> &'static str {
		match self {
			Self::Assert => "assert",
			Self::Abs => "math.abs",
			Self::Acos => "math.acos",
			Self::Asin => "math.asin",
			Self::Atan2 => "math.atan2",
			Self::Atan => "math.atan",
			Self::Ceil => "math.ceil",
			Self::Cosh => "math.cosh",
			Self::Cos => "math.cos",
			Self::Deg => "math.deg",
			Self::Exp => "math.exp",
			Self::Floor => "math.floor",
			Self::Fmod => "math.fmod",
			Self::Frexp => "math.frexp",
			Self::Ldexp => "math.ldexp",
			Self::Log10 => "math.log10",
			Self::Log => "math.log",
			Self::Max => "math.max",
			Self::Min => "math.min",
			Self::Modf => "math.modf",
			Self::Pow => "math.pow",
			Self::Rad => "math.rad",
			Self::Sinh => "math.sinh",
			Self::Sin => "math.sin",
			Self::Sqrt => "math.sqrt",
			Self::Tanh => "math.tanh",
			Self::Tan => "math.tan",
			Self::Arshift => "bit32.arshift",
			Self::Band => "bit32.band",
			Self::Bnot => "bit32.bnot",
			Self::Bor => "bit32.bor",
			Self::Bxor => "bit32.bxor",
			Self::Btest => "bit32.btest",
			Self::Extract => "bit32.extract",
			Self::Lrotate => "bit32.lrotate",
			Self::Lshift => "bit32.lshift",
			Self::Replace => "bit32.replace",
			Self::Rrotate => "bit32.rrotate",
			Self::Rshift => "bit32.rshift",
			Self::Type => "type",
			Self::Byte => "string.byte",
			Self::Char => "string.char",
			Self::Len => "string.len",
			Self::Typeof => "typeof",
			Self::Sub => "string.sub",
			Self::Clamp => "math.clamp",
			Self::Sign => "math.sign",
			Self::Round => "math.round",
			Self::Rawset => "rawset",
			Self::Rawget => "rawget",
			Self::Rawequal => "rawequal",
			Self::Tinsert => "table.insert",
			Self::Tunpack => "table.unpack",
			Self::Vector => "vector",
			Self::Countlz => "bit32.countlz",
			Self::Countrz => "bit32.countrz",
			Self::Select => "select",
			Self::Rawlen => "rawlen",
			Self::ExtractK => "bit32.extract",
			Self::GetMetatable => "getmetatable",
			Self::SetMetatable => "setmetatable",
		}
	}
}
